use crate::{
    schema_mode::{TypeInfoFields, SQL_PRED_BASIC, SQL_PRED_NONE, SQL_SEARCHABLE},
    definitions::SqlDataType,
};

#[non_exhaustive]
#[derive(Debug, PartialEq, Eq, Clone)]
pub struct SimpleBsonTypeInfo {
    pub type_info_fields: TypeInfoFields,
}

impl SimpleBsonTypeInfo {
    pub const DOUBLE: SimpleBsonTypeInfo = SimpleBsonTypeInfo {
        type_info_fields: TypeInfoFields {
            type_name: "double",
            sql_type: SqlDataType::DOUBLE,
            non_concise_type: SqlDataType::DOUBLE,
            searchable: SQL_PRED_BASIC,
            is_case_sensitive: false,
            fixed_prec_scale: true,
            scale: Some(15),
            precision: Some(15),
            octet_length: Some(8),
            fixed_bytes_length: Some(8),
            literal_prefix: None,
            literal_suffix: None,
            sql_code: None,
            is_auto_unique_value: Some(false),
            is_unsigned: Some(false),
            num_prec_radix: Some(10),
        },
    };
    pub const STRING: SimpleBsonTypeInfo = SimpleBsonTypeInfo {
        type_info_fields: TypeInfoFields {
            type_name: "string",
            sql_type: SqlDataType::EXT_W_VARCHAR,
            non_concise_type: SqlDataType::VARCHAR,
            searchable: SQL_SEARCHABLE,
            is_case_sensitive: true,
            fixed_prec_scale: false,
            scale: None,
            precision: None,
            octet_length: None,
            fixed_bytes_length: None,
            literal_prefix: Some("'"),
            literal_suffix: Some("'"),
            sql_code: None,
            is_auto_unique_value: None,
            is_unsigned: None,
            num_prec_radix: None,
        },
    };
    pub const OBJECT: SimpleBsonTypeInfo = SimpleBsonTypeInfo {
        type_info_fields: TypeInfoFields {
            type_name: "object",
            sql_type: SqlDataType::VARCHAR,
            non_concise_type: SqlDataType::VARCHAR,
            searchable: SQL_PRED_NONE,
            is_case_sensitive: true,
            fixed_prec_scale: false,
            scale: None,
            precision: None,
            octet_length: None,
            fixed_bytes_length: None,
            literal_prefix: None,
            literal_suffix: None,
            sql_code: None,
            is_auto_unique_value: None,
            is_unsigned: None,
            num_prec_radix: None,
        },
    };
    pub const ARRAY: SimpleBsonTypeInfo = SimpleBsonTypeInfo {
        type_info_fields: TypeInfoFields {
            type_name: "array",
            sql_type: SqlDataType::VARCHAR,
            non_concise_type: SqlDataType::VARCHAR,
            searchable: SQL_PRED_NONE,
            is_case_sensitive: true,
            fixed_prec_scale: false,
            scale: None,
            precision: None,
            octet_length: None,
            fixed_bytes_length: None,
            literal_prefix: None,
            literal_suffix: None,
            sql_code: None,
            is_auto_unique_value: None,
            is_unsigned: None,
            num_prec_radix: None,
        },
    };
    pub const BINDATA: SimpleBsonTypeInfo = SimpleBsonTypeInfo {
        type_info_fields: TypeInfoFields {
            type_name: "binData",
            sql_type: SqlDataType::EXT_BINARY,
            non_concise_type: SqlDataType::EXT_BINARY,
            searchable: SQL_PRED_NONE,
            is_case_sensitive: false,
            fixed_prec_scale: false,
            scale: None,
            precision: None,
            octet_length: None,
            fixed_bytes_length: None,
            literal_prefix: None,
            literal_suffix: None,
            sql_code: None,
            is_auto_unique_value: None,
            is_unsigned: None,
            num_prec_radix: None,
        },
    };
    pub const UNDEFINED: SimpleBsonTypeInfo = SimpleBsonTypeInfo {
        type_info_fields: TypeInfoFields {
            type_name: "undefined",
            sql_type: SqlDataType::VARCHAR,
            non_concise_type: SqlDataType::VARCHAR,
            searchable: SQL_PRED_NONE,
            is_case_sensitive: true,
            fixed_prec_scale: false,
            scale: None,
            precision: Some(20),
            octet_length: Some(20),
            fixed_bytes_length: Some(20),
            literal_prefix: None,
            literal_suffix: None,
            sql_code: None,
            is_auto_unique_value: None,
            is_unsigned: None,
            num_prec_radix: None,
        },
    };
    pub const OBJECTID: SimpleBsonTypeInfo = SimpleBsonTypeInfo {
        type_info_fields: TypeInfoFields {
            type_name: "objectId",
            sql_type: SqlDataType::VARCHAR,
            non_concise_type: SqlDataType::VARCHAR,
            searchable: SQL_PRED_BASIC,
            is_case_sensitive: true,
            fixed_prec_scale: false,
            scale: None,
            precision: Some(34),
            octet_length: Some(34),
            fixed_bytes_length: None,
            literal_prefix: None,
            literal_suffix: None,
            sql_code: None,
            is_auto_unique_value: Some(true),
            is_unsigned: None,
            num_prec_radix: None,
        },
    };
    pub const BOOL: SimpleBsonTypeInfo = SimpleBsonTypeInfo {
        type_info_fields: TypeInfoFields {
            type_name: "bool",
            sql_type: SqlDataType::EXT_BIT,
            non_concise_type: SqlDataType::EXT_BIT,
            searchable: SQL_PRED_BASIC,
            is_case_sensitive: false,
            fixed_prec_scale: false,
            scale: None,
            precision: Some(1),
            octet_length: Some(1),
            fixed_bytes_length: Some(1),
            literal_prefix: None,
            literal_suffix: None,
            sql_code: None,
            is_auto_unique_value: None,
            is_unsigned: None,
            num_prec_radix: None,
        },
    };
    pub const DATE: SimpleBsonTypeInfo = SimpleBsonTypeInfo {
        type_info_fields: TypeInfoFields {
            type_name: "date",
            sql_type: SqlDataType::TIMESTAMP,
            non_concise_type: SqlDataType::DATETIME,
            searchable: SQL_PRED_BASIC,
            is_case_sensitive: false,
            fixed_prec_scale: true,
            scale: Some(3),
            precision: Some(23),
            octet_length: Some(16),
            fixed_bytes_length: Some(16),
            literal_prefix: Some("'"),
            literal_suffix: Some("'"),
            sql_code: Some(3),
            is_auto_unique_value: None,
            is_unsigned: None,
            num_prec_radix: None,
        },
    };
    pub const NULL: SimpleBsonTypeInfo = SimpleBsonTypeInfo {
        type_info_fields: TypeInfoFields {
            type_name: "null",
            sql_type: SqlDataType::VARCHAR,
            non_concise_type: SqlDataType::VARCHAR,
            searchable: SQL_PRED_NONE,
            is_case_sensitive: true,
            fixed_prec_scale: false,
            scale: None,
            precision: Some(4),
            octet_length: Some(4),
            fixed_bytes_length: Some(4),
            literal_prefix: None,
            literal_suffix: None,
            sql_code: None,
            is_auto_unique_value: None,
            is_unsigned: None,
            num_prec_radix: None,
        },
    };
    pub const REGEX: SimpleBsonTypeInfo = SimpleBsonTypeInfo {
        type_info_fields: TypeInfoFields {
            type_name: "regex",
            sql_type: SqlDataType::VARCHAR,
            non_concise_type: SqlDataType::VARCHAR,
            searchable: SQL_PRED_BASIC,
            is_case_sensitive: true,
            fixed_prec_scale: false,
            scale: None,
            precision: None,
            octet_length: None,
            fixed_bytes_length: None,
            literal_prefix: None,
            literal_suffix: None,
            sql_code: None,
            is_auto_unique_value: None,
            is_unsigned: None,
            num_prec_radix: None,
        },
    };
    pub const DBPOINTER: SimpleBsonTypeInfo = SimpleBsonTypeInfo {
        type_info_fields: TypeInfoFields {
            type_name: "dbPointer",
            sql_type: SqlDataType::VARCHAR,
            non_concise_type: SqlDataType::VARCHAR,
            searchable: SQL_PRED_BASIC,
            is_case_sensitive: true,
            fixed_prec_scale: false,
            scale: None,
            precision: None,
            octet_length: None,
            fixed_bytes_length: None,
            literal_prefix: None,
            literal_suffix: None,
            sql_code: None,
            is_auto_unique_value: None,
            is_unsigned: None,
            num_prec_radix: None,
        },
    };
    pub const JAVASCRIPT: SimpleBsonTypeInfo = SimpleBsonTypeInfo {
        type_info_fields: TypeInfoFields {
            type_name: "javascript",
            sql_type: SqlDataType::VARCHAR,
            non_concise_type: SqlDataType::VARCHAR,
            searchable: SQL_PRED_BASIC,
            is_case_sensitive: true,
            fixed_prec_scale: false,
            scale: None,
            precision: None,
            octet_length: None,
            fixed_bytes_length: None,
            literal_prefix: None,
            literal_suffix: None,
            sql_code: None,
            is_auto_unique_value: None,
            is_unsigned: None,
            num_prec_radix: None,
        },
    };
    pub const SYMBOL: SimpleBsonTypeInfo = SimpleBsonTypeInfo {
        type_info_fields: TypeInfoFields {
            type_name: "symbol",
            sql_type: SqlDataType::VARCHAR,
            non_concise_type: SqlDataType::VARCHAR,
            searchable: SQL_PRED_BASIC,
            is_case_sensitive: true,
            fixed_prec_scale: false,
            scale: None,
            precision: None,
            octet_length: None,
            fixed_bytes_length: None,
            literal_prefix: None,
            literal_suffix: None,
            sql_code: None,
            is_auto_unique_value: None,
            is_unsigned: None,
            num_prec_radix: None,
        },
    };
    pub const JAVASCRIPTWITHSCOPE: SimpleBsonTypeInfo = SimpleBsonTypeInfo {
        type_info_fields: TypeInfoFields {
            type_name: "javascriptWithScope",
            sql_type: SqlDataType::VARCHAR,
            non_concise_type: SqlDataType::VARCHAR,
            searchable: SQL_PRED_BASIC,
            is_case_sensitive: true,
            fixed_prec_scale: false,
            scale: None,
            precision: None,
            octet_length: None,
            fixed_bytes_length: None,
            literal_prefix: None,
            literal_suffix: None,
            sql_code: None,
            is_auto_unique_value: None,
            is_unsigned: None,
            num_prec_radix: None,
        },
    };
    pub const INT: SimpleBsonTypeInfo = SimpleBsonTypeInfo {
        type_info_fields: TypeInfoFields {
            type_name: "int",
            sql_type: SqlDataType::INTEGER,
            non_concise_type: SqlDataType::INTEGER,
            searchable: SQL_PRED_BASIC,
            is_case_sensitive: false,
            fixed_prec_scale: true,
            scale: Some(0),
            precision: Some(10),
            octet_length: Some(4),
            fixed_bytes_length: Some(4),
            literal_prefix: None,
            literal_suffix: None,
            sql_code: None,
            is_auto_unique_value: Some(false),
            is_unsigned: Some(false),
            num_prec_radix: Some(10),
        },
    };
    pub const TIMESTAMP: SimpleBsonTypeInfo = SimpleBsonTypeInfo {
        type_info_fields: TypeInfoFields {
            type_name: "timestamp",
            sql_type: SqlDataType::VARCHAR,
            non_concise_type: SqlDataType::VARCHAR,
            searchable: SQL_PRED_BASIC,
            is_case_sensitive: true,
            fixed_prec_scale: false,
            scale: None,
            precision: Some(68),
            octet_length: Some(68),
            fixed_bytes_length: None,
            literal_prefix: None,
            literal_suffix: None,
            sql_code: None,
            is_auto_unique_value: None,
            is_unsigned: None,
            num_prec_radix: None,
        },
    };
    pub const LONG: SimpleBsonTypeInfo = SimpleBsonTypeInfo {
        type_info_fields: TypeInfoFields {
            type_name: "long",
            sql_type: SqlDataType::EXT_BIG_INT,
            non_concise_type: SqlDataType::EXT_BIG_INT,
            searchable: SQL_PRED_BASIC,
            is_case_sensitive: false,
            fixed_prec_scale: true,
            scale: Some(0),
            precision: Some(19),
            octet_length: Some(8),
            fixed_bytes_length: Some(8),
            literal_prefix: None,
            literal_suffix: None,
            sql_code: None,
            is_auto_unique_value: Some(false),
            is_unsigned: Some(false),
            num_prec_radix: Some(10),
        },
    };
    pub const DECIMAL: SimpleBsonTypeInfo = SimpleBsonTypeInfo {
        type_info_fields: TypeInfoFields {
            type_name: "decimal",
            sql_type: SqlDataType::DECIMAL,
            non_concise_type: SqlDataType::DECIMAL,
            searchable: SQL_PRED_BASIC,
            is_case_sensitive: false,
            fixed_prec_scale: false,
            scale: None,
            precision: Some(34),
            octet_length: Some(16),
            fixed_bytes_length: Some(16),
            literal_prefix: None,
            literal_suffix: None,
            sql_code: None,
            is_auto_unique_value: Some(false),
            is_unsigned: Some(false),
            num_prec_radix: None,
        },
    };
    pub const MINKEY: SimpleBsonTypeInfo = SimpleBsonTypeInfo {
        type_info_fields: TypeInfoFields {
            type_name: "minKey",
            sql_type: SqlDataType::VARCHAR,
            non_concise_type: SqlDataType::VARCHAR,
            searchable: SQL_PRED_BASIC,
            is_case_sensitive: true,
            fixed_prec_scale: false,
            scale: None,
            precision: Some(14),
            octet_length: Some(14),
            fixed_bytes_length: Some(14),
            literal_prefix: None,
            literal_suffix: None,
            sql_code: None,
            is_auto_unique_value: None,
            is_unsigned: None,
            num_prec_radix: None,
        },
    };
    pub const MAXKEY: SimpleBsonTypeInfo = SimpleBsonTypeInfo {
        type_info_fields: TypeInfoFields {
            type_name: "maxKey",
            sql_type: SqlDataType::VARCHAR,
            non_concise_type: SqlDataType::VARCHAR,
            searchable: SQL_PRED_BASIC,
            is_case_sensitive: true,
            fixed_prec_scale: false,
            scale: None,
            precision: Some(14),
            octet_length: Some(14),
            fixed_bytes_length: Some(14),
            literal_prefix: None,
            literal_suffix: None,
            sql_code: None,
            is_auto_unique_value: None,
            is_unsigned: None,
            num_prec_radix: None,
        },
    };
    pub const BSON: SimpleBsonTypeInfo = SimpleBsonTypeInfo {
        type_info_fields: TypeInfoFields {
            type_name: "bson",
            sql_type: SqlDataType::VARCHAR,
            non_concise_type: SqlDataType::VARCHAR,
            searchable: SQL_PRED_NONE,
            is_case_sensitive: true,
            fixed_prec_scale: false,
            scale: None,
            precision: None,
            octet_length: None,
            fixed_bytes_length: None,
            literal_prefix: None,
            literal_suffix: None,
            sql_code: None,
            is_auto_unique_value: None,
            is_unsigned: None,
            num_prec_radix: None,
        },
    };
}
